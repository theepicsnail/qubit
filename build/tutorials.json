[
	{"name":"Overview", "program": [
		"; Welcome to the overview of the Quantum Computer Simulator",
    "",
		"; This area is the editor! You'll type your code here.",
		"",
		"; You'll see your qubits on the right as a SUPERPOSITION",
		"; Let's not worry about that just yet.",
		"",
		"; Below are the run and step buttons",
		"; You'll use those to run your program, or go 1 step at a time.",
		"",
		"; And that about covers it! Check out the menu in the top left for more!",
		"",
		"; If you're not sure what to do, I recommend Tutorial 1, it's very nice."
	]},

	{"name":"Tutorial 1 - The basics", "program": [
		"; First let's cover syntax a little bit.",
		"; Anything after a ';' is ignored by the computer.",
		"",
		"; Blank lines are also ignored.",
		"",
		"; Instructions are written as a name, then some arguments.",
		"; For example, we can make the computer have 1 qubit like this:",
		"",
		"bits 1",
		"",
		"; Try pressing 'Step' below (not 'Run' yet).",
		"; The '100% 0' on the right means our qubit is 100% '0' (and 0% '1')",
		"; Let's measure it! (click 'Step' again.)",
		"",
		"measure 0",
		"",
		"; Measure(0) = 0 means we measured bit 0, and got the result '0'",
		"; Let's see what a 1 looks like.",
		"; Applying the 'not' gate to it, then measuring again will do that!",
		"; Step through these and watch your output on the right",
		"not 0",
		"measure 0",
		"",
		"; Phew! Alright up for Tutorial 2?"
	]},

	{"name": "Tutorial 2 - cnot and swap", "program": [
		"; Welcome back!",
		"; This tutorial covers the 'cnot' gate, which uses 2 qubits!",
		"bits 2",
		"",
		"; cnot inverts the 'target' bit only if the 'control' bit is 1.",
		"; cnot 0 1 will invert bit 0 only if bit 1 is a '1'",
		"",
		"cnot 0 1 ; Does nothing because bit 0 is a 0.",
		"",
		"not 1 ; Invert bit 1",
		"; It's worth noting the 'left' bit is 1. Bits are in descending order.",
		"",
		"cnot 0 1",
		"; There we go, both bits are now 1",
		"",
		"; Next up swap! Should be pretty easy, it swaps 2 bits",
		"not 1",
		"; 0 1",
		"swap 0 1",
		"; 1 0",
		"",
		"; Alright, next tutorial things get harder."
	]},

	{"name": "Tutorial 3 - Hadamard", "program":[
		"; Ready for non-classical bits? Here we go!",
		"; Let's get a couple bits to play with.",
		"bits 2",
		"",
		"; Hadamard (or 'h') is a truly quantum gate.",
		"; It splits a bit between 0 and 1.",
		"hadamard 0",
		"",
		"; TADA! You now have 2 possible outcomes if you measured it.",
		"; Bit 1 is always a 0 (notice it's 0 in both cases). But bit 0...",
		"; If we measure bit 0 right now it's randomly 0 or 1.",
		"; However if we measure it, it'll collapse back into 100% 0 or 1.",
		"measure 0",
		"",
		"; Well you have a 0 or 1 now with 100%. Let's go ahead an reset.",
		"bits 2",
		"h 0 ; shorthand for 'hadamard'",
		"",
		"; Here's an experiment. If our bit is 50/50 between 0 and 1, then",
		"; we use that bit as the control to a cnot gate, we may or may not",
		"; invert the target bit.",
		"cnot 1 0",
		"",
		"; In the case where bit 0 was a 1, bit 1 is inverted. In the case where",
		"; bit 0 was a 0, we didn't invert so bit 1 stayed a 0.",
		"",
		"; These bits are now entagled! ",
		"; More about entaglement in the next tutorial"
	]},
	{"name": "Tutorial 4 - Entanglement", "program":[
		"; Glad you're making it through. Things get a little messy now.",
		"; Let's build 2 entagled bits.",
		"bits 2",
		"h 0",
		"cnot 1 0",
		"",
		"; If bit 0 is a 0 we don't invert bit 1, so we end up with both being 0.",
		"; If bit 0 is a 1, cnot does invert bit 1 so we end up with both being 1.",
		"",
		"; Right now both options are equally possible (50% each).",
		"; If we meausre bit 0 and find it's a 0, then we know bit 1 must be a 0.",
		"; Bit 1 loses its ability to be a '1' since bit 0 being 0 and bit 1 being 1",
		"; is not a valid outcome. (there's a 0% chance of that.)",
		"measure 0",
		"",
		"; Notice we're now 100%, bit 1 is now entirely defined.",
		"measure 1",
		"",
		"; The first measurement (measure 0) could be 0 or 1 with equal chances.",
		"; The 2nd measurement (measure 1) must match the result of the first.",
		"; Note, it's not bit 0 or 1, its first/second. Changing the order of",
		"; measurement does not impact the results. First is 50/50, Second matches.",
		"",
		"; Try 'Run'ing this a few times, try swapping the measurement order."
	]}
]
